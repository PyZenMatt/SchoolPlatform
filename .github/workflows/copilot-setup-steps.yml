name: Copilot Setup Steps

on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  copilot-setup-steps:
    runs-on: ubuntu-latest

    # Permessi minimi per clonare il repo
    permissions:
      contents: read

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: schoolplatform
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7-alpine
        ports: ["6379:6379"]
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DJANGO_SETTINGS_MODULE: "config.settings.ci"
      PYTHONUNBUFFERED: "1"

      # DB/Cache (usati da Django)
      POSTGRES_DB: "schoolplatform"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_HOST: "localhost"
      POSTGRES_PORT: "5432"
      REDIS_URL: "redis://localhost:6379/1"

      # Metti questa nei Secrets se preferisci:
      SECRET_KEY: "dummy-ci-key"

      FRONTEND_DIR: "frontend"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: System deps (libpq, build tools)
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev build-essential

      - name: Install backend deps
        run: pip install -r requirements.txt

      - name: Wait for Postgres to be ready
        run: |
          python - <<'PY'
          import time, socket
          host, port = "localhost", 5432
          for _ in range(60):
              try:
                  s = socket.create_connection((host, port), 2); s.close(); break
              except OSError:
                  time.sleep(1)
          PY

      - name: Django migrate
        run: python manage.py migrate --noinput

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

      - name: Install frontend deps
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci

      - name: Build frontend (Vite)
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run build
