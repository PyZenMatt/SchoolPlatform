/**
 * Web3 Service for TeoCoin2 integration
 * Handles Metamask connection and smart contract interactions
 */

import { ethers } from 'ethers';

// TeoCoin2 Contract Configuration
const TEOCOIN_CONTRACT_ADDRESS = '0x20D6656A31297ab3b8A87291Ed562D4228Be9ff8';
const POLYGON_AMOY_CHAIN_ID = '0x13882'; // 80002 in hex
const POLYGON_AMOY_RPC_URL = 'https://rpc-amoy.polygon.technology/';

// Simplified ABI - only the functions we need
const TEOCOIN_ABI = [
  'function name() view returns (string)',
  'function symb  async processCoursePayment(studentAddress, teacherAddress, coursePrice, courseId) {
    if (!studentAddress || !teacherAddress || !coursePrice || !courseId) {
      throw new Error('Parametri mancanti per il pagamento del corso');
    }

    try {
      console.log('🎓 Processing course payment via MetaMask...');
      console.log(`Student: ${studentAddress}`);
      console.log(`Teacher: ${teacherAddress}`);
      console.log(`Price: ${coursePrice} TEO`);

      // Step 1: Check if student has enough MATIC for gas fees
      console.log('🔍 Checking MATIC balance for gas fees...');
      const maticCheck = await this.checkMaticForGas(studentAddress, '0.01'); (string)', 
  'function decimals() view returns (uint8)',
  'function balanceOf(address) view returns (uint256)',
  'function totalSupply() view returns (uint256)',
  'function transfer(address to, uint256 amount) returns (bool)',
  'function approve(address spender, uint256 amount) returns (bool)',
  'function allowance(address owner, address spender) view returns (uint256)',
  // Events
  'event Transfer(address indexed from, address indexed to, uint256 value)',
  'event TokensMinted(address indexed mintedTo, uint256 quantityMinted)',
  'event Approval(address indexed owner, address indexed spender, uint256 value)'
];

class Web3Service {
  constructor() {
    this.provider = null;
    this.signer = null;
    this.contract = null;
    this.userAddress = null;
    
    // Setup read-only provider for balance queries
    this.provider = new ethers.JsonRpcProvider(POLYGON_AMOY_RPC_URL);
    this.contract = new ethers.Contract(
      TEOCOIN_CONTRACT_ADDRESS,
      TEOCOIN_ABI,
      this.provider
    );
  }

  /**
   * Check if Metamask is installed
   */
  isMetamaskInstalled() {
    return typeof window !== 'undefined' && typeof window.ethereum !== 'undefined';
  }

  /**
   * Connect to Metamask wallet to get an address
   */
  async connectWallet() {
    if (!this.isMetamaskInstalled()) {
      throw new Error('Metamask non è installato. Installa Metamask per continuare.');
    }

    try {
      // Connect to Metamask to get the address
      await window.ethereum.request({ method: 'eth_requestAccounts' });
      
      // Setup temporary provider just to get the address
      const tempProvider = new ethers.BrowserProvider(window.ethereum);
      const tempSigner = await tempProvider.getSigner();
      const address = await tempSigner.getAddress();

      console.log('✅ Wallet address obtained:', address);
      return address;

    } catch (error) {
      console.error('Errore connessione wallet:', error);
      throw new Error('Errore nella connessione del wallet: ' + error.message);
    }
  }

  /**
   * Switch to Polygon Amoy testnet
   */
  async switchToPolygonAmoy() {
    try {
      await window.ethereum.request({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId: POLYGON_AMOY_CHAIN_ID }],
      });
    } catch (switchError) {
      // Chain not added to Metamask
      if (switchError.code === 4902) {
        try {
          await window.ethereum.request({
            method: 'wallet_addEthereumChain',
            params: [{
              chainId: POLYGON_AMOY_CHAIN_ID,
              chainName: 'Polygon Amoy Testnet',
              nativeCurrency: {
                name: 'MATIC',
                symbol: 'MATIC',
                decimals: 18,
              },
              rpcUrls: [POLYGON_AMOY_RPC_URL],
              blockExplorerUrls: ['https://amoy.polygonscan.com/'],
            }],
          });
        } catch (addError) {
          throw new Error('Errore nell\'aggiunta della rete Polygon Amoy');
        }
      } else {
        throw new Error('Errore nel cambio di rete');
      }
    }
  }

  /**
   * Get current connected address from MetaMask (if any)
   */
  async getCurrentAddress() {
    if (!this.isMetamaskInstalled()) {
      return null;
    }
    
    try {
      const accounts = await window.ethereum.request({ method: 'eth_accounts' });
      return accounts.length > 0 ? accounts[0] : null;
    } catch (error) {
      console.error('Error getting current address:', error);
      return null;
    }
  }

  /**
   * Get current connected address (alias for compatibility)
   */
  async getCurrentAccount() {
    return this.getCurrentAddress();
  }

  /**
   * Get accounts from Metamask
   */
  async getAccounts() {
    if (!this.isMetamaskInstalled()) {
      return [];
    }
    
    try {
      const accounts = await window.ethereum.request({ 
        method: 'eth_accounts' 
      });
      return accounts;
    } catch (error) {
      console.error('Error getting accounts:', error);
      return [];
    }
  }

  /**
   * Get TeoCoin balance for a specific wallet address (read-only)
   */
  async getBalance(address) {
    // Check if address is valid (not null, undefined, or empty string)
    if (!address || address.trim() === '') {
      throw new Error('Nessun indirizzo wallet specificato');
    }

    try {
      // Use read-only provider to prevent MetaMask interference
      const provider = new ethers.JsonRpcProvider(POLYGON_AMOY_RPC_URL);
      const contract = new ethers.Contract(TEOCOIN_CONTRACT_ADDRESS, TEOCOIN_ABI, provider);
      const balance = await contract.balanceOf(address);
      
      console.log('� Balance ottenuto per indirizzo:', address, 'Balance:', ethers.formatEther(balance));
      return ethers.formatEther(balance);
      
    } catch (error) {
      console.error('Errore nel recupero balance per indirizzo', address, ':', error);
      throw new Error('Errore nel recupero del saldo');
    }
  }

  /**
   * Get token information
   */
  async getTokenInfo() {
    if (!this.contract) {
      // Use a read-only provider for token info
      const provider = new ethers.JsonRpcProvider(POLYGON_AMOY_RPC_URL);
      const contract = new ethers.Contract(TEOCOIN_CONTRACT_ADDRESS, TEOCOIN_ABI, provider);
      
      try {
        const [name, symbol, decimals, totalSupply] = await Promise.all([
          contract.name(),
          contract.symbol(), 
          contract.decimals(),
          contract.totalSupply()
        ]);

        return {
          name,
          symbol,
          decimals: Number(decimals),
          totalSupply: ethers.formatEther(totalSupply),
          contractAddress: TEOCOIN_CONTRACT_ADDRESS
        };
      } catch (error) {
        console.error('Errore nel recupero info token:', error);
        throw new Error('Errore nel recupero informazioni token');
      }
    }

    try {
      const [name, symbol, decimals, totalSupply] = await Promise.all([
        this.contract.name(),
        this.contract.symbol(),
        this.contract.decimals(), 
        this.contract.totalSupply()
      ]);

      return {
        name,
        symbol,
        decimals: Number(decimals),
        totalSupply: ethers.formatEther(totalSupply),
        contractAddress: TEOCOIN_CONTRACT_ADDRESS
      };
    } catch (error) {
      console.error('Errore nel recupero info token:', error);
      throw new Error('Errore nel recupero informazioni token');
    }
  }

  /**
   * Listen for token transfer events
   */
  onTokenTransfer(callback) {
    if (!this.contract) {
      console.warn('Contract non inizializzato per gli eventi');
      return;
    }

    this.contract.on('Transfer', (from, to, value, event) => {
      callback({
        from,
        to,
        value: ethers.formatEther(value),
        transactionHash: event.transactionHash,
        blockNumber: event.blockNumber
      });
    });
  }

  /**
   * Listen for token mint events
   */
  onTokensMinted(callback) {
    if (!this.contract) {
      console.warn('Contract non inizializzato per gli eventi');
      return;
    }

    this.contract.on('TokensMinted', (mintedTo, quantityMinted, event) => {
      callback({
        mintedTo,
        quantity: ethers.formatEther(quantityMinted),
        transactionHash: event.transactionHash,
        blockNumber: event.blockNumber
      });
    });
  }

  /**
   * Check wallet connection and return address if connected
   */
  async checkConnection() {
    // Check MetaMask connection if available
    if (this.isMetamaskInstalled()) {
      try {
        const accounts = await window.ethereum.request({ method: 'eth_accounts' });
        if (accounts.length > 0) {
          return accounts[0];
        }
      } catch (error) {
        console.error('Error checking MetaMask connection:', error);
      }
    }
    
    return null;
  }

  /**
   * Check if wallet is connected
   */
  async isConnected() {
    const address = await this.checkConnection();
    return address !== null;
  }

  /**
   * Generate a new wallet with mnemonic phrase
   */
  generateWallet() {
    try {
      // Generate a random wallet
      const wallet = ethers.Wallet.createRandom();
      
      return {
        address: wallet.address,
        privateKey: wallet.privateKey,
        mnemonic: wallet.mnemonic.phrase
      };
      
    } catch (error) {
      console.error('Error generating wallet:', error);
      throw new Error('Errore nella generazione del wallet');
    }
  }

  /**
   * Recover wallet from mnemonic phrase
   */
  recoverWallet(mnemonicPhrase) {
    try {
      const wallet = ethers.Wallet.fromPhrase(mnemonicPhrase.trim());
      
      return {
        address: wallet.address,
        privateKey: wallet.privateKey,
        mnemonic: wallet.mnemonic.phrase
      };
      
    } catch (error) {
      console.error('Error recovering wallet:', error);
      throw new Error('Frase di recupero non valida');
    }
  }

  /**
   * Setup generated wallet for blockchain operations
   */
  async setupGeneratedWallet(privateKey) {
    try {
      // Create provider for Polygon Amoy
      this.provider = new ethers.JsonRpcProvider(POLYGON_AMOY_RPC_URL);
      
      // Create wallet instance from private key
      const wallet = new ethers.Wallet(privateKey, this.provider);
      this.signer = wallet;
      this.userAddress = wallet.address;

      // Setup contract instance
      this.contract = new ethers.Contract(
        TEOCOIN_CONTRACT_ADDRESS,
        TEOCOIN_ABI,
        this.signer
      );

      console.log('Generated wallet setup completed:', this.userAddress);
      return this.userAddress;

    } catch (error) {
      console.error('Error setting up generated wallet:', error);
      throw new Error('Errore nella configurazione del wallet generato');
    }
  }

  /**
   * Transfer TeoCoin tokens to another address
   */
  async transferTokens(toAddress, amount) {
    if (!this.isConnected()) {
      throw new Error('Wallet non connesso');
    }

    if (!this.contract) {
      throw new Error('Contratto non inizializzato');
    }

    try {
      // Convert amount to wei (18 decimals for TeoCoin)
      const amountWei = ethers.parseEther(amount.toString());
      
      // Validate the recipient address
      if (!ethers.isAddress(toAddress)) {
        throw new Error('Indirizzo destinatario non valido');
      }

      console.log(`Transferring ${amount} TEO to ${toAddress}`);
      
      // Execute the transfer
      const transaction = await this.contract.transfer(toAddress, amountWei);
      
      console.log('Transaction sent:', transaction.hash);
      
      // Wait for confirmation
      const receipt = await transaction.wait();
      
      if (receipt.status === 1) {
        console.log('Transfer completed successfully:', receipt.hash);
        return receipt.hash;
      } else {
        throw new Error('Transaction failed');
      }
      
    } catch (error) {
      console.error('Transfer error:', error);
      
      // Handle specific error types
      if (error.code === 'INSUFFICIENT_FUNDS') {
        throw new Error('Fondi insufficienti per la transazione');
      } else if (error.code === 'USER_REJECTED') {
        throw new Error('Transazione rifiutata dall\'utente');
      } else if (error.message.includes('insufficient funds')) {
        throw new Error('TEO insufficienti o fondi per gas insufficienti');
      } else if (error.message.includes('user rejected')) {
        throw new Error('Transazione rifiutata dall\'utente');
      }
      
      throw new Error(`Errore nel trasferimento: ${error.message}`);
    }
  }

  /**
   * Transfer tokens using reward pool for gas fees (for testing)
   */
  async transferTokensWithPoolGas(fromAddress, toAddress, amount) {
    try {
      const response = await fetch('/api/blockchain/transfer-with-pool-gas/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({
          from_address: fromAddress,
          to_address: toAddress,
          amount: amount.toString()
        })
      });

      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Transfer failed');
      }

      return data.transaction_hash;
    } catch (error) {
      console.error('Error in transferTokensWithPoolGas:', error);
      throw error;
    }
  }

  /**
   * Simulate user payment via reward pool (for testing without gas fees)
   */
  async simulatePaymentViaPool(fromAddress, toAddress, amount) {
    try {
      const response = await fetch('/api/v1/blockchain/simulate-payment/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({
          from_user_address: fromAddress,
          to_address: toAddress,
          amount: amount.toString()
        })
      });

      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Payment simulation failed');
      }

      return data.transaction_hash;
    } catch (error) {
      console.error('Error in simulatePaymentViaPool:', error);
      throw error;
    }
  }

  /**
   * Wait for transaction confirmation
   */
  async waitForTransactionConfirmation(txHash, confirmations = 1) {
    if (!this.provider) {
      throw new Error('Provider non inizializzato');
    }

    try {
      console.log(`Waiting for ${confirmations} confirmation(s) for transaction: ${txHash}`);
      
      const receipt = await this.provider.waitForTransaction(txHash, confirmations);
      
      if (receipt && receipt.status === 1) {
        console.log('Transaction confirmed:', txHash);
        return receipt;
      } else {
        throw new Error('Transaction failed or was reverted');
      }
      
    } catch (error) {
      console.error('Error waiting for transaction confirmation:', error);
      throw new Error(`Errore nella conferma della transazione: ${error.message}`);
    }
  }

  /**
   * Process course payment using MetaMask for transaction signing:
   * - Frontend handles all transactions via MetaMask
   * - Student signs approve() transaction
   * - Backend coordinates transferFrom() via reward pool
   * - All transaction hashes sent to backend for recording
   */
  async processCoursePayment(studentAddress, teacherAddress, coursePrice, courseId) {
    // Always use locked wallet address if available, otherwise use provided studentAddress
    const effectiveAddress = this.getLockedWalletAddress() || studentAddress;
    
    if (!effectiveAddress) {
      throw new Error('Wallet non connesso');
    }

    try {
      console.log('🎓 Processing course payment via MetaMask...');
      console.log(`Student: ${effectiveAddress}`);
      console.log(`Teacher: ${teacherAddress}`);
      console.log(`Price: ${coursePrice} TEO`);

      // Step 1: Check if student has enough MATIC for gas fees
      console.log('🔍 Checking MATIC balance for gas fees...');
      const maticCheck = await this.checkMaticForGas('0.01'); // Require minimum 0.01 MATIC
      
      if (!maticCheck.hasEnough) {
        throw new Error(
          `MATIC insufficienti per gas fees. ` +
          `Hai ${maticCheck.balance} MATIC, servono almeno ${maticCheck.required} MATIC. ` +
          `Ottieni MATIC da: https://faucet.polygon.technology/`
        );
      }
      
      console.log(`✅ MATIC check passed: ${maticCheck.balance} MATIC available`);

      // Step 2: Check student's TEO balance
      console.log('🔍 Checking TEO balance...');
      const teoBalance = await this.getBalance();
      if (parseFloat(teoBalance) < parseFloat(coursePrice)) {
        throw new Error(
          `TEO insufficienti. Hai ${teoBalance} TEO, servono ${coursePrice} TEO`
        );
      }
      console.log(`✅ TEO check passed: ${teoBalance} TEO available`);

      // Step 3: Setup Web3 connection for MetaMask
      await this.connectWallet();
      
      // Special handling for locked wallet: we need a signer for transactions
      if (this.isWalletLocked && this.lockedWalletAddress) {
        console.log('🔒 Wallet locked - enabling signing for transactions');
        try {
          await this.enableSigning();
        } catch (signingError) {
          // If signing fails due to account mismatch, provide helpful error message
          if (signingError.message.includes('MetaMask è connesso')) {
            throw new Error(
              `${signingError.message}\n\n` +
              `Istruzioni:\n` +
              `1. Apri MetaMask\n` +
              `2. Clicca sull'icona dell'account in alto a destra\n` +
              `3. Seleziona l'account: ${this.lockedWalletAddress}\n` +
              `4. Riprova l'acquisto`
            );
          }
          throw signingError;
        }
      }
      
      if (!this.provider || !this.signer) {
        throw new Error('MetaMask non connesso o firma non abilitata');
      }

      // Calculate amounts
      const coursePriceWei = ethers.parseEther(coursePrice.toString());
      const commissionRate = 0.15; // 15%
      const commissionAmount = parseFloat(coursePrice) * commissionRate;
      const teacherAmount = parseFloat(coursePrice) - commissionAmount;

      console.log(`💰 Amounts: Course=${coursePrice} TEO, Teacher=${teacherAmount} TEO, Commission=${commissionAmount} TEO`);

      // Step 4: Get reward pool address from backend
      const prerequisitesResponse = await fetch('/api/v1/blockchain/check-course-payment-prerequisites/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token') || localStorage.getItem('access')}`
        },
        body: JSON.stringify({
          student_address: effectiveAddress,
          course_price: coursePrice.toString()
        })
      });

      if (!prerequisitesResponse.ok) {
        throw new Error('Failed to get payment prerequisites');
      }

      const prerequisites = await prerequisitesResponse.json();
      const rewardPoolAddress = prerequisites.reward_pool_address;

      if (!rewardPoolAddress) {
        throw new Error('Reward pool address not configured');
      }

      console.log(`🏦 Reward pool address: ${rewardPoolAddress}`);

      // Step 5: Student approves reward pool to spend their TEO (MetaMask signature)
      console.log('✍️ Requesting student approval via MetaMask...');
      const approvalTx = await this.contract.connect(this.signer).approve(
        rewardPoolAddress,
        coursePriceWei
      );

      console.log('⏳ Waiting for approval confirmation...');
      const approvalReceipt = await approvalTx.wait();
      console.log(`✅ Approval confirmed: ${approvalReceipt.hash}`);

      // Step 6: Send transaction details to backend for transferFrom execution
      console.log('📤 Sending transaction details to backend...');
      const response = await fetch('/api/v1/blockchain/execute-course-payment/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token') || localStorage.getItem('access')}`
        },
        body: JSON.stringify({
          student_address: effectiveAddress,
          teacher_address: teacherAddress,
          course_price: coursePrice.toString(),
          course_id: courseId,
          approval_tx_hash: approvalReceipt.hash,
          teacher_amount: teacherAmount.toString(),
          commission_amount: commissionAmount.toString()
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Payment execution failed');
      }

      const result = await response.json();
      console.log('✅ Course payment executed successfully:', result);

      return {
        transactionHash: result.teacher_payment_tx,
        studentAddress: effectiveAddress,
        teacherAddress: result.teacher_address,
        teacherAmount: result.teacher_amount,
        commissionAmount: result.commission_amount,
        totalPaid: coursePrice.toString(),
        approvalTx: approvalReceipt.hash,
        commissionTx: result.commission_tx
      };

    } catch (error) {
      console.error('❌ Course payment failed:', error);
      throw error;
    }
  }

  /**
   * Get MATIC balance for a specific wallet address
   */
  async getMaticBalance(address) {
    // Check if address is valid (not null, undefined, or empty string)
    if (!address || address.trim() === '') {
      throw new Error('Nessun indirizzo wallet specificato');
    }

    try {
      // Use read-only provider to prevent MetaMask interference
      const provider = new ethers.JsonRpcProvider(POLYGON_AMOY_RPC_URL);
      const balance = await provider.getBalance(address);
      
      console.log('⛽ MATIC balance ottenuto per indirizzo:', address, 'Balance:', ethers.formatEther(balance));
      return ethers.formatEther(balance);
      
    } catch (error) {
      console.error('Errore nel recupero balance MATIC per indirizzo', address, ':', error);
      throw new Error('Errore nel recupero del saldo MATIC');
    }
  }

  /**
   * Check if user has enough MATIC for gas fees
   */
  async checkMaticForGas(address, minMaticRequired = '0.01') {
    try {
      const maticBalance = await this.getMaticBalance(address);
      const hasEnoughMatic = parseFloat(maticBalance) >= parseFloat(minMaticRequired);
      
      return {
        balance: maticBalance,
        hasEnough: hasEnoughMatic,
        required: minMaticRequired
      };
    } catch (error) {
      console.error('Errore nel controllo MATIC:', error);
      return {
        balance: '0',
        hasEnough: false,
        required: minMaticRequired,
        error: error.message
      };
    }
  }

  /**
   * Disconnect wallet
   */
  disconnectWallet() {
    // Reset connection state
    this.provider = new ethers.JsonRpcProvider(POLYGON_AMOY_RPC_URL);
    this.contract = new ethers.Contract(TEOCOIN_CONTRACT_ADDRESS, TEOCOIN_ABI, this.provider);
    this.signer = null;
    this.userAddress = null;
    
    console.log('🔓 Wallet disconnected');
  }
}

// Export singleton instance
export const web3Service = new Web3Service();
export default web3Service;
